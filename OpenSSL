#  Generate CA private key

openssl genrsa -out ca.key 2048

#  Generate CA cert

openssl req -x509 -new -nodes -key ca.key -sha256 -days 1825 -out ca.crt

#  Generate new server key

openssl genrsa -out server1 2048

#  For serverAuth set the following config file (eg: servercert1.conf)

    [req]
    distinguished_name = req_distinguished_name
    req_extensions = v3_req
    prompt = no

    [req_distinguished_name]
    countryName                     = XX
    stateOrProvinceName             = XXXXXX
    localityName                    = XXXXXX
    postalCode                      = XXXXXX
    organizationName                = XXXXXX
    organizationalUnitName          = XXXXXX
    commonName                      = XXXXXX
    emailAddress                    = XXXXXX

    [v3_req]
    keyUsage = keyEncipherment, dataEncipherment
    extendedKeyUsage = serverAuth
    subjectAltName = @alt_names

    [alt_names]
    DNS.1 = DOMAIN_1
    DNS.2 = DOMAIN_2
    DNS.3 = DOMAIN_3
    DNS.4 = DOMAIN_4

#  Generate new csr from key

openssl req -sha512 -new -key server1 -out server1.csr -config servercert1.conf

#  Sign the key using the CA cert to generate a server cert

openssl x509 -req -in server1.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server1.crt -days 1825 -sha512 -extensions v3_req -extfile servercert1.conf

#  For clientAuth set the following config file (eg: clientcert1.conf)

    [req]
    distinguished_name = req_distinguished_name
    req_extensions = v3_req
    prompt = no
    
    [req_distinguished_name]
    countryName                     = XX
    stateOrProvinceName             = XXXXXX
    localityName                    = XXXXXX
    postalCode                      = XXXXXX
    organizationName                = XXXXXX
    organizationalUnitName          = XXXXXX
    commonName                      = XXXXXX
    emailAddress                    = XXXXXX

    [ usr_cert ]
    # Extensions for server certificates (`man x509v3_config`).
    basicConstraints = CA:FALSE
    nsCertType = client, server
    nsComment = "OpenSSL Client Certificate"
    subjectKeyIdentifier = hash
    authorityKeyIdentifier = keyid,issuer:always
    keyUsage = critical, digitalSignature, keyEncipherment, keyAgreement, nonRepudiation
    extendedKeyUsage = serverAuth, clientAuth

    [v3_req]
    keyUsage = keyEncipherment, dataEncipherment
    extendedKeyUsage = clientAuth

# Generate a client key

openssl genrsa -out client1.key 2048

# Generate CSR for client key

openssl req -sha512 -new -key client1.key -out client1.csr -config clientcert1.conf 

# Sign the client key using the CA cert

openssl x509 -req -in client1.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out client1.crt -days 1825 -sha512 -extensions v3_req -extfile clientcert1.conf

#  View a cert

openssl x509 -in client1.crt -text -noout

#  Verify cert and key (compare outputs)

openssl x509 -noout -modulus -in client1 | openssl md5
openssl rsa -noout -modulus -in client1 | openssl md5


NOTES:
- Sometimes, '.pem' files need to be changed to '.crt' extension to be recognised Windows systems
- OpenSSL can convert certs and keys from binary to text base64 formats such as '.pem'.
